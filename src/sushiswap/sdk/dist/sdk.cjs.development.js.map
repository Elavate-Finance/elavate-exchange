{"version":3,"file":"sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/entities/AbstractCurrency.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/entities/NativeCurrency.ts","../src/entities/natives/Avalanche.ts","../src/entities/natives/Binance.ts","../src/entities/natives/Celo.ts","../src/entities/natives/Ether.ts","../src/entities/natives/Fantom.ts","../src/entities/natives/Harmony.ts","../src/entities/natives/Heco.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Okex.ts","../src/entities/natives/xDai.ts","../src/constants/natives.ts","../src/constants/index.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/validateSolidityTypeInstance.ts","../src/functions/sqrt.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842'\n}\n\nexport const SUSHI_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const BENTOBOX_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const KASHI_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\n// export const KASHI_ADDRESS = '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42'\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS = '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB'\n\nexport const BORING_HELPER_ADDRESS = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    chainId: number,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      'DECIMALS'\n    )\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.chainId === other.chainId &&\n      this.address === other.address\n    )\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(\n  currencyA: Currency,\n  currencyB: Currency\n): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH9: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(\n    ChainId.GÖRLI,\n    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n}\n\nexport const WNATIVE: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n    18,\n    'WXDAI',\n    'Wrapped xDai'\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(\n    ChainId.CELO,\n    '0x471EcE3750Da237f93B8E339c536989b8978a438',\n    18,\n    'CELO',\n    'Celo'\n  ),\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return (\n      this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WETH9 } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return (\n      this._etherCache[chainId] ??\n      (this._etherCache[chainId] = new Ether(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Harmony,\n  Heco,\n  Matic,\n  Okex,\n  xDai,\n} from '../entities/natives'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n}\n","export * from './addresses'\nexport * from './natives'\n\nimport JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\nexport const INIT_CODE_HASH: string =\n  '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt(\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  ),\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    )\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish)\n      return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    )\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    )\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    )\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh\n  ) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals)\n    )\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator\n    )\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency\n> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase,\n      quoteCurrency: TQuote,\n      denominator: BigintIsh,\n      numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    )\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    )\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator\n    )\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\n    ? [tokenA, tokenB]\n    : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      ['bytes'],\n      [pack(['address', 'address'], [token0.address, token1.address])]\n    ),\n    INIT_CODE_HASH\n  )\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(\n  value: JSBI,\n  solidityType: SolidityType\n): void {\n  invariant(\n    JSBI.greaterThanOrEqual(value, ZERO),\n    `${value} is not a ${solidityType}.`\n  )\n  invariant(\n    JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]),\n    `${value} is not a ${solidityType}.`\n  )\n}\n","import { ONE, SolidityType, THREE, TWO, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport { validateSolidityTypeInstance } from './validateSolidityTypeInstance'\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n","import {\n  FACTORY_ADDRESS,\n  FIVE,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO,\n  _1000,\n  _997,\n} from '../constants'\nimport {\n  InsufficientInputAmountError,\n  InsufficientReservesError,\n} from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [\n      CurrencyAmount<Token>,\n      CurrencyAmount<Token>\n    ]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(\n      this.token0,\n      this.token1,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(\n      this.token1,\n      this.token0,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO)\n    ) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(\n      JSBI.multiply(inputReserve.quotient, _1000),\n      inputAmountWithFee\n    )\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount)\n      ),\n    ]\n  }\n\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(\n        outputAmount.quotient,\n        this.reserveOf(outputAmount.currency).quotient\n      )\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const numerator = JSBI.multiply(\n      JSBI.multiply(inputReserve.quotient, outputAmount.quotient),\n      _1000\n    )\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount)\n      ),\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(\n      tokenAmounts[0].currency.equals(this.token0) &&\n        tokenAmounts[1].currency.equals(this.token1),\n      'TOKEN'\n    )\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\n        this.reserve0.quotient\n      )\n      const amount1 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\n        this.reserve1.quotient\n      )\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(\n      JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient),\n      'LIQUIDITY'\n    )\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(\n          JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient)\n        )\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(\n            totalSupply.quotient,\n            JSBI.subtract(rootK, rootKLast)\n          )\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(\n            CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity)\n          )\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(\n        JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient),\n        totalSupplyAdjusted.quotient\n      )\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super\n      .multiply(ONE_HUNDRED)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' ||\n        pairs[pairs.length - 1].involvesToken(output.wrapped),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(\n        currentInput.equals(pair.token0) || currentInput.equals(pair.token1),\n        'PATH'\n      )\n      const output = currentInput.equals(pair.token0)\n        ? pair.token1\n        : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(\n              pair.reserve0.currency,\n              pair.reserve1.currency,\n              pair.reserve0.quotient,\n              pair.reserve1.quotient\n            )\n          : new Price(\n              pair.reserve1.currency,\n              pair.reserve0.currency,\n              pair.reserve1.quotient,\n              pair.reserve0.quotient\n            )\n      )\n    }\n    const reduced = prices\n      .slice(1)\n      .reduce(\n        (accumulator, currentValue) => accumulator.multiply(currentValue),\n        prices[0]\n      )\n    return (this._midPrice = new Price(\n      this.input,\n      this.output,\n      reduced.denominator,\n      reduced.numerator\n    ))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<\n  TBase extends Currency,\n  TQuote extends Currency\n>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount\n    .subtract(outputAmount)\n    .divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(\n  items: T[],\n  add: T,\n  maxSize: number,\n  comparator: (a: T, b: T) => number\n): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<\n  TInput extends Currency,\n  TOutput extends Currency\n>(a: InputOutput<TInput, TOutput>, b: InputOutput<TInput, TOutput>): number {\n  // must have same input and output token for comparison\n  invariant(\n    a.inputAmount.currency.equals(b.inputAmount.currency),\n    'INPUT_CURRENCY'\n  )\n  invariant(\n    a.outputAmount.currency.equals(b.outputAmount.currency),\n    'OUTPUT_CURRENCY'\n  )\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT\n      ? CurrencyAmount<TInput>\n      : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        amount.numerator,\n        amount.denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amount.numerator,\n        amount.denominator\n      )\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(\n      route.midPrice,\n      this.inputAmount,\n      this.outputAmount\n    )\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.outputAmount.currency,\n        slippageAdjustedAmountOut\n      )\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.inputAmount.currency,\n        slippageAdjustedAmountIn\n      )\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<\n    TInput extends Currency,\n    TOutput extends Currency\n  >(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(\n      currencyAmountIn === nextAmountIn || currentPairs.length > 0,\n      'INVALID_RECURSION'\n    )\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (\n        !pair.token0.equals(amountIn.currency) &&\n        !pair.token1.equals(amountIn.currency)\n      )\n        continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route(\n              [...currentPairs, pair],\n              currencyAmountIn.currency,\n              currencyOut\n            ),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs\n          .slice(0, i)\n          .concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(\n    slippageTolerance: Percent\n  ): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<\n    TInput extends Currency,\n    TOutput extends Currency\n  >(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(\n      currencyAmountOut === nextAmountOut || currentPairs.length > 0,\n      'INVALID_RECURSION'\n    )\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (\n        !pair.token0.equals(amountOut.currency) &&\n        !pair.token1.equals(amountOut.currency)\n      )\n        continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route(\n              [pair, ...currentPairs],\n              currencyIn,\n              currencyAmountOut.currency\n            ),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs\n          .slice(0, i)\n          .concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(\n      trade.maximumAmountIn(options.allowedSlippage)\n    )\n    const amountOut: string = toHex(\n      trade.minimumAmountOut(options.allowedSlippage)\n    )\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(\n            16\n          )}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactETHForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForETHSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO","HECO_TESTNET","HARMONY","HARMONY_TESTNET","OKEX","OKEX_TESTNET","CELO","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","Rounding","TradeType","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH9","WNATIVE","NativeCurrency","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Okex","xDai","NATIVE","MaxUint256","JSBI","BigInt","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","sqrt","y","z","x","notEqual","Pair","currencyAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}