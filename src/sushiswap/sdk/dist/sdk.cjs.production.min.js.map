{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/constants/addresses.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/entities/AbstractCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/entities/NativeCurrency.ts","../src/entities/natives/Avalanche.ts","../src/entities/natives/Binance.ts","../src/entities/natives/Celo.ts","../src/entities/natives/Ether.ts","../src/entities/natives/Fantom.ts","../src/entities/natives/Harmony.ts","../src/entities/natives/Heco.ts","../src/entities/natives/Matic.ts","../src/entities/natives/Okex.ts","../src/entities/natives/xDai.ts","../src/constants/index.ts","../src/constants/natives.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/validateSolidityTypeInstance.ts","../src/functions/sqrt.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n}\n","import { ChainId } from '../enums/ChainId'\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842'\n}\n\nexport const SUSHI_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const MASTERCHEF_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const BAR_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const MAKER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const TIMELOCK_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const BENTOBOX_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const KASHI_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\n// export const KASHI_ADDRESS = '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42'\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: {\n  [chainId in ChainId]: string\n} = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS = '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB'\n\nexport const BORING_HELPER_ADDRESS = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: ''\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    chainId: number,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      'DECIMALS'\n    )\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.chainId === other.chainId &&\n      this.address === other.address\n    )\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(\n  currencyA: Currency,\n  currencyB: Currency\n): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH9: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(\n    ChainId.GÖRLI,\n    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH9',\n    'Wrapped Ether'\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n}\n\nexport const WNATIVE: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n    18,\n    'WXDAI',\n    'Wrapped xDai'\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(\n    ChainId.CELO,\n    '0x471EcE3750Da237f93B8E339c536989b8978a438',\n    18,\n    'CELO',\n    'Celo'\n  ),\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return (\n      this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WETH9 } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return (\n      this._etherCache[chainId] ??\n      (this._etherCache[chainId] = new Ether(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Token, WNATIVE } from '../Token'\n\nimport { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","export * from './addresses'\nexport * from './natives'\n\nimport JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\nexport const INIT_CODE_HASH: string =\n  '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt(\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  ),\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Harmony,\n  Heco,\n  Matic,\n  Okex,\n  xDai,\n} from '../entities/natives'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    )\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish)\n      return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    )\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    )\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    )\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh\n  ) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals)\n    )\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator\n    )\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency\n> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase,\n      quoteCurrency: TQuote,\n      denominator: BigintIsh,\n      numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    )\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    )\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator\n    )\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\n    ? [tokenA, tokenB]\n    : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      ['bytes'],\n      [pack(['address', 'address'], [token0.address, token1.address])]\n    ),\n    INIT_CODE_HASH\n  )\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(\n  value: JSBI,\n  solidityType: SolidityType\n): void {\n  invariant(\n    JSBI.greaterThanOrEqual(value, ZERO),\n    `${value} is not a ${solidityType}.`\n  )\n  invariant(\n    JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]),\n    `${value} is not a ${solidityType}.`\n  )\n}\n","import { ONE, SolidityType, THREE, TWO, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport { validateSolidityTypeInstance } from './validateSolidityTypeInstance'\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n","import {\n  FACTORY_ADDRESS,\n  FIVE,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO,\n  _1000,\n  _997,\n} from '../constants'\nimport {\n  InsufficientInputAmountError,\n  InsufficientReservesError,\n} from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [\n      CurrencyAmount<Token>,\n      CurrencyAmount<Token>\n    ]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(\n      this.token0,\n      this.token1,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(\n      this.token1,\n      this.token0,\n      result.denominator,\n      result.numerator\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO)\n    ) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(\n      JSBI.multiply(inputReserve.quotient, _1000),\n      inputAmountWithFee\n    )\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount)\n      ),\n    ]\n  }\n\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(\n        outputAmount.quotient,\n        this.reserveOf(outputAmount.currency).quotient\n      )\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    )\n    const numerator = JSBI.multiply(\n      JSBI.multiply(inputReserve.quotient, outputAmount.quotient),\n      _1000\n    )\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount)\n      ),\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(\n      tokenAmountB.currency\n    ) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(\n      tokenAmounts[0].currency.equals(this.token0) &&\n        tokenAmounts[1].currency.equals(this.token1),\n      'TOKEN'\n    )\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient),\n        this.reserve0.quotient\n      )\n      const amount1 = JSBI.divide(\n        JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient),\n        this.reserve1.quotient\n      )\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(\n      JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient),\n      'LIQUIDITY'\n    )\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(\n          JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient)\n        )\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(\n            totalSupply.quotient,\n            JSBI.subtract(rootK, rootKLast)\n          )\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(\n            CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity)\n          )\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(\n        JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient),\n        totalSupplyAdjusted.quotient\n      )\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super\n      .multiply(ONE_HUNDRED)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(\n      typeof output === 'undefined' ||\n        pairs[pairs.length - 1].involvesToken(output.wrapped),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(\n        currentInput.equals(pair.token0) || currentInput.equals(pair.token1),\n        'PATH'\n      )\n      const output = currentInput.equals(pair.token0)\n        ? pair.token1\n        : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(\n              pair.reserve0.currency,\n              pair.reserve1.currency,\n              pair.reserve0.quotient,\n              pair.reserve1.quotient\n            )\n          : new Price(\n              pair.reserve1.currency,\n              pair.reserve0.currency,\n              pair.reserve1.quotient,\n              pair.reserve0.quotient\n            )\n      )\n    }\n    const reduced = prices\n      .slice(1)\n      .reduce(\n        (accumulator, currentValue) => accumulator.multiply(currentValue),\n        prices[0]\n      )\n    return (this._midPrice = new Price(\n      this.input,\n      this.output,\n      reduced.denominator,\n      reduced.numerator\n    ))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<\n  TBase extends Currency,\n  TQuote extends Currency\n>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount\n    .subtract(outputAmount)\n    .divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(\n  items: T[],\n  add: T,\n  maxSize: number,\n  comparator: (a: T, b: T) => number\n): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<\n  TInput extends Currency,\n  TOutput extends Currency\n>(a: InputOutput<TInput, TOutput>, b: InputOutput<TInput, TOutput>): number {\n  // must have same input and output token for comparison\n  invariant(\n    a.inputAmount.currency.equals(b.inputAmount.currency),\n    'INPUT_CURRENCY'\n  )\n  invariant(\n    a.outputAmount.currency.equals(b.outputAmount.currency),\n    'OUTPUT_CURRENCY'\n  )\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT\n      ? CurrencyAmount<TInput>\n      : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        amount.numerator,\n        amount.denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amount.numerator,\n        amount.denominator\n      )\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(\n      route.midPrice,\n      this.inputAmount,\n      this.outputAmount\n    )\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.outputAmount.currency,\n        slippageAdjustedAmountOut\n      )\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(\n        this.inputAmount.currency,\n        slippageAdjustedAmountIn\n      )\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<\n    TInput extends Currency,\n    TOutput extends Currency\n  >(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(\n      currencyAmountIn === nextAmountIn || currentPairs.length > 0,\n      'INVALID_RECURSION'\n    )\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (\n        !pair.token0.equals(amountIn.currency) &&\n        !pair.token1.equals(amountIn.currency)\n      )\n        continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route(\n              [...currentPairs, pair],\n              currencyAmountIn.currency,\n              currencyOut\n            ),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs\n          .slice(0, i)\n          .concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(\n    slippageTolerance: Percent\n  ): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<\n    TInput extends Currency,\n    TOutput extends Currency\n  >(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(\n      currencyAmountOut === nextAmountOut || currentPairs.length > 0,\n      'INVALID_RECURSION'\n    )\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (\n        !pair.token0.equals(amountOut.currency) &&\n        !pair.token1.equals(amountOut.currency)\n      )\n        continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route(\n              [pair, ...currentPairs],\n              currencyIn,\n              currencyAmountOut.currency\n            ),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs\n          .slice(0, i)\n          .concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(\n      trade.maximumAmountIn(options.allowedSlippage)\n    )\n    const amountOut: string = toHex(\n      trade.minimumAmountOut(options.allowedSlippage)\n    )\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(\n            16\n          )}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactETHForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForETHSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","FANTOM_TESTNET","MATIC","MATIC_TESTNET","XDAI","BSC","BSC_TESTNET","ARBITRUM","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO","HECO_TESTNET","HARMONY","HARMONY_TESTNET","OKEX","OKEX_TESTNET","CELO","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","BORING_HELPER_ADDRESS","Rounding","TradeType","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","validateAndParseAddress","address","getAddress","error","Token","equals","other","isToken","this","sortsBefore","toLowerCase","WETH9","WNATIVE","NativeCurrency","Avalanche","_NativeCurrency","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Okex","xDai","SolidityType","NATIVE","MaxUint256","JSBI","BigInt","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","getCreate2Address","keccak256","pack","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","sqrt","y","x","z","notEqual","Pair","currencyAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","i","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB"],"mappings":"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"}